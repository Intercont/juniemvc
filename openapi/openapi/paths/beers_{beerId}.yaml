parameters:
  - name: beerId
    in: path
    description: "ID of the beer to operate on"
    required: true
    schema:
      type: integer
      format: int32
    example: 1

get:
  tags:
    - Beer
  summary: Get beer by ID
  description: "Returns a single beer by its ID."
  operationId: getBeerById
  security:
    - api_key: []
  responses:
    '200':
      description: "Successfully retrieved the beer"
      content:
        application/json:
          schema:
            $ref: '../components/schemas/BeerDto.yaml'
          example:
            id: 1
            version: 1
            beerName: "Mango Bobs"
            beerStyle: "IPA"
            upc: "0631234200036"
            quantityOnHand: 122
            price: 12.99
            createdDate: "2023-01-15T12:00:00Z"
            updatedDate: "2023-01-20T15:30:00Z"
    '401':
      description: "Unauthorized"
    '404':
      description: "Beer not found"

put:
  tags:
    - Beer
  summary: Update beer
  description: "Updates an existing beer in the system."
  operationId: updateBeer
  security:
    - api_key: []
  requestBody:
    description: "Updated beer object"
    required: true
    content:
      application/json:
        schema:
          $ref: '../components/schemas/BeerDto.yaml'
        example:
          beerName: "Mango Bobs"
          beerStyle: "IPA"
          upc: "0631234200036"
          quantityOnHand: 150
          price: 13.99
  responses:
    '200':
      description: "Successfully updated the beer"
      content:
        application/json:
          schema:
            $ref: '../components/schemas/BeerDto.yaml'
          example:
            id: 1
            version: 2
            beerName: "Mango Bobs"
            beerStyle: "IPA"
            upc: "0631234200036"
            quantityOnHand: 150
            price: 13.99
            createdDate: "2023-01-15T12:00:00Z"
            updatedDate: "2023-01-25T09:45:00Z"
    '400':
      description: "Invalid beer data provided"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Validation failed"
              errors:
                type: array
                items:
                  type: string
                example: ["Beer name is required", "Price must be positive"]
    '401':
      description: "Unauthorized"
    '404':
      description: "Beer not found"

patch:
  tags:
    - Beer
  summary: Partially update beer
  description: "Partially updates an existing beer in the system. Only the provided fields will be updated."
  operationId: patchBeer
  security:
    - api_key: []
  requestBody:
    description: "Partial beer object with only the fields to update"
    required: true
    content:
      application/json:
        schema:
          $ref: '../components/schemas/BeerPathDto.yaml'
        example:
          beerName: "Updated Mango Bobs"
          price: 14.99
  responses:
    '200':
      description: "Successfully updated the beer"
      content:
        application/json:
          schema:
            $ref: '../components/schemas/BeerDto.yaml'
          example:
            id: 1
            version: 2
            beerName: "Updated Mango Bobs"
            beerStyle: "IPA"
            upc: "0631234200036"
            quantityOnHand: 122
            price: 14.99
            createdDate: "2023-01-15T12:00:00Z"
            updatedDate: "2023-01-25T09:45:00Z"
    '401':
      description: "Unauthorized"
    '404':
      description: "Beer not found"

delete:
  tags:
    - Beer
  summary: Delete beer
  description: "Deletes a beer from the system."
  operationId: deleteBeer
  security:
    - api_key: []
  responses:
    '204':
      description: "Successfully deleted the beer"
    '401':
      description: "Unauthorized"
    '404':
      description: "Beer not found"
