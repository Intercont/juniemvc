get:
  tags:
    - BeerOrder
  summary: Get all beer orders
  description: "Returns a list of all beer orders in the system."
  operationId: getAllBeerOrders
  security:
    - api_key: []
  responses:
    '200':
      description: "Successfully retrieved the list of beer orders"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '../components/schemas/BeerOrderDto.yaml'
          example:
            - id: 1
              version: 1
              customerRef: "CUST-123"
              paymentAmount: 59.99
              status: "NEW"
              createdDate: "2023-01-15T12:00:00Z"
              updatedDate: "2023-01-15T12:00:00Z"
              beerOrderLines:
                - id: 1
                  version: 1
                  beerId: 123
                  orderQuantity: 6
                  quantityAllocated: 6
                  status: "ALLOCATED"
                  createdDate: "2023-01-15T12:00:00Z"
                  updatedDate: "2023-01-15T12:00:00Z"
            - id: 2
              version: 1
              customerRef: "CUST-456"
              paymentAmount: 35.99
              status: "PROCESSING"
              createdDate: "2023-01-16T10:00:00Z"
              updatedDate: "2023-01-16T10:00:00Z"
              beerOrderLines:
                - id: 2
                  version: 1
                  beerId: 456
                  orderQuantity: 3
                  quantityAllocated: 3
                  status: "ALLOCATED"
                  createdDate: "2023-01-16T10:00:00Z"
                  updatedDate: "2023-01-16T10:00:00Z"
    '400':
      description: "Bad request"
    '401':
      description: "Unauthorized"

post:
  tags:
    - BeerOrder
  summary: Create a new beer order
  description: "Creates a new beer order in the system with customer reference, payment details, and beer order lines."
  operationId: createBeerOrder
  security:
    - api_key: []
  requestBody:
    description: "Beer order object to be created"
    required: true
    content:
      application/json:
        schema:
          $ref: '../components/schemas/BeerOrderDto.yaml'
        example:
          customerRef: "CUST-123"
          paymentAmount: 59.99
          beerOrderLines:
            - beerId: 123
              orderQuantity: 6
  responses:
    '201':
      description: "Successfully created a new beer order"
      content:
        application/json:
          schema:
            $ref: '../components/schemas/BeerOrderDto.yaml'
          example:
            id: 1
            version: 1
            customerRef: "CUST-123"
            paymentAmount: 59.99
            status: "NEW"
            createdDate: "2023-01-15T12:00:00Z"
            updatedDate: "2023-01-15T12:00:00Z"
            beerOrderLines:
              - id: 1
                version: 1
                beerId: 123
                orderQuantity: 6
                quantityAllocated: 0
                status: "NEW"
                createdDate: "2023-01-15T12:00:00Z"
                updatedDate: "2023-01-15T12:00:00Z"
    '400':
      description: "Invalid beer order data provided"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Validation failed"
              errors:
                type: array
                items:
                  type: string
                example: ["Customer reference is required", "Payment amount must be positive"]
    '401':
      description: "Unauthorized"